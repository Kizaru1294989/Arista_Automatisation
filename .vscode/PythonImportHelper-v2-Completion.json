[
    {
        "label": "yaml_content",
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "isExtraImport": true,
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "ansible_data",
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "isExtraImport": true,
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "Tools.Color",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "isExtraImport": true,
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "input_fabric",
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "isExtraImport": true,
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "welcome",
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "isExtraImport": true,
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "save_to_json",
        "importPath": "Tools.Json.convert_to_json",
        "description": "Tools.Json.convert_to_json",
        "isExtraImport": true,
        "detail": "Tools.Json.convert_to_json",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "isExtraImport": true,
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "importPath": "Tools.Run_Playbook.run_playbook",
        "description": "Tools.Run_Playbook.run_playbook",
        "isExtraImport": true,
        "detail": "Tools.Run_Playbook.run_playbook",
        "documentation": {}
    },
    {
        "label": "orange",
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "isExtraImport": true,
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "isExtraImport": true,
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "rainbow",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "rainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "yaml_content",
        "kind": 5,
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "peekOfCode": "yaml_content = f\"\"\"---\n- name: Run commands on remote cEOS-lab device\n  hosts: arista\n  connection: httpapi\n  gather_facts: no\n  vars:\n    ansible_python_interpreter: \"python\"\n  tasks:\n    - name: Execute Arista EOS command\n      eos_command:",
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "ansible_data",
        "kind": 5,
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "peekOfCode": "ansible_data = \"\"\"\n[defaults]\ninventory = ../hosts.json\nhost_key_checking = False\nroles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"",
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "inventory",
        "kind": 5,
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "peekOfCode": "inventory = ../hosts.json\nhost_key_checking = False\nroles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"",
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "host_key_checking",
        "kind": 5,
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "peekOfCode": "host_key_checking = False\nroles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"",
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "roles_path",
        "kind": 5,
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "peekOfCode": "roles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"",
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "stdout_callback",
        "kind": 5,
        "importPath": "Tools.Config.File.Connect_test.connect_test",
        "description": "Tools.Config.File.Connect_test.connect_test",
        "peekOfCode": "stdout_callback = yaml\n                \"\"\"",
        "detail": "Tools.Config.File.Connect_test.connect_test",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "def init():\n  path_playbook = \"Ansible/connectivity/get-version.yml\"\n  path_ansible_cfg = \"Ansible/connectivity/ansible.cfg\"\n  generate_config_file(path_ansible_cfg,ansible_data)\n  generate_config_file(path_playbook,yaml_content)\ndef generate_config_file(path_playbook,file_content):\n    with open(path_playbook, \"w\") as file:\n        file.write(file_content)\n        print(f\"✅ {os.path.basename(path_playbook)} créé avec succès\")",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "generate_config_file",
        "kind": 2,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "def generate_config_file(path_playbook,file_content):\n    with open(path_playbook, \"w\") as file:\n        file.write(file_content)\n        print(f\"✅ {os.path.basename(path_playbook)} créé avec succès\")",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "Tools.Config.try_connectivity",
        "description": "Tools.Config.try_connectivity",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"Erreur lors de l'exécution du playbook : {e}\")\n    else:\n        print(\"Le playbook a été exécuté avec succès.\")",
        "detail": "Tools.Config.try_connectivity",
        "documentation": {}
    },
    {
        "label": "network_choice",
        "kind": 2,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "def network_choice():\n    network_fabric = input(f\"{colors.orange}Veuillez entrer le réseau de votre fabrique (exemple : 10.43.193.1)\\nSi vous voulez utiliser le VLAN 193, entrez 'o', sinon entrez 'n': \")\n    while network_fabric.strip() not in [\"o\", \"n\"]:\n        if network_fabric.strip() == \"\":\n            print(\"❌ L'entrée ne peut pas être vide.\")\n        else:\n            print(\"❌ Veuillez entrer 'o' pour utiliser le VLAN 193 ou 'n' pour entrer un autre réseau.\")\n        network_fabric = input(f\"{colors.orange}Veuillez entrer le réseau de votre fabrique (exemple : 10.43.193.1)\\nSi vous voulez utiliser le VLAN 193, entrez 'o', sinon entrez 'n': \")\n    if network_fabric == \"o\":\n        return \"10.43.193.1\"",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "last_octet",
        "kind": 2,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "def last_octet(adresse_ip):\n    octets = adresse_ip.split('.')  \n    octets.pop()\n    nouvelle_adresse_ip = '.'.join(octets)\n    return nouvelle_adresse_ip\ndef fill_input_fabric(network,fabric):\n    for i in range(8):\n        while True:\n            ip = input(\"Veuillez entrer le dernier octet de l'ip du leaf {}  : \".format(i+1))\n            if ip.strip() == \"\":",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "fill_input_fabric",
        "kind": 2,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "def fill_input_fabric(network,fabric):\n    for i in range(8):\n        while True:\n            ip = input(\"Veuillez entrer le dernier octet de l'ip du leaf {}  : \".format(i+1))\n            if ip.strip() == \"\":\n                print(\"L'adresse IP ne peut pas être vide.\")\n            else:\n                ip_address = (network + \".\" + ip)\n                fabric['leafs']['leaf{}'.format(i+1)] = ip_address\n                break",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "input_fabric",
        "kind": 2,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "def input_fabric():\n    network_fabric = network_choice()\n    network = last_octet(network_fabric)\n    admin_user = input(f\"{colors.orange}Veuillez entrer le admin user : \")\n    admin_password = input(f\"{colors.orange}Veuillez entrer le mot de passe admin user : \")\n    while admin_user.strip() == \"\" or admin_password.strip() == \"\":\n        print(\"❌ L'entrée ne peut pas être vide.\")\n        input_fabric()\n    fabric = {'admin_user': admin_user\n              ,'password' : admin_password",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "welcome",
        "kind": 5,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "welcome = f\"\"\"{colors.orange}\n  ___       _     _        \n / _ \\     (_)   | |       \n/ /_\\ \\_ __ _ ___| |_ __ _ \n|  _  | '__| / __| __/ _` |\n| | | | |  | \\__ \\ || (_| |\n\\_| |_/_|  |_|___/\\__\\__,_|\n\"\"\"\ndef network_choice():\n    network_fabric = input(f\"{colors.orange}Veuillez entrer le réseau de votre fabrique (exemple : 10.43.193.1)\\nSi vous voulez utiliser le VLAN 193, entrez 'o', sinon entrez 'n': \")",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "save_to_json",
        "kind": 2,
        "importPath": "Tools.Json.convert_to_json",
        "description": "Tools.Json.convert_to_json",
        "peekOfCode": "def save_to_json(admin_user,admin_password, fabric):\n    data = {\n        \"arista\": {\n            \"hosts\": {},\n            \"vars\": {\n                \"ansible_network_os\": \"eos\",\n                \"ansible_httpapi_use_ssl\": \"yes\",\n                \"ansible_httpapi_validate_certs\": \"no\",\n                \"ansible_user\": admin_user,\n                \"ansible_httpapi_password\": admin_password",
        "detail": "Tools.Json.convert_to_json",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "Tools.Run_Playbook.run_playbook",
        "description": "Tools.Run_Playbook.run_playbook",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True",
        "detail": "Tools.Run_Playbook.run_playbook",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "yml.main",
        "description": "yml.main",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef Leaf_mlag():\n    print(\"MLAG PEER LINK - LEAF-1 <=> LEAF-2 \\n\")",
        "detail": "yml.main",
        "documentation": {}
    },
    {
        "label": "Leaf_mlag",
        "kind": 2,
        "importPath": "yml.main",
        "description": "yml.main",
        "peekOfCode": "def Leaf_mlag():\n    print(\"MLAG PEER LINK - LEAF-1 <=> LEAF-2 \\n\")\n    print(\"LEAF_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Leef/peer_link_1/Leaf_1/Leaf1.yml\")\n    print(\"LEAF_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Leef/peer_link_1/Leaf_2/Leaf2.yml\")\n    print(\"MLAG PEER LINK - LEAF-3 <=> LEAF-4 \\n\")\n    print(\"LEAF_3\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Leef/peer_link_2/Leaf_3/Leaf3.yml\")\n    print(\"LEAF_4\")",
        "detail": "yml.main",
        "documentation": {}
    },
    {
        "label": "Spine_mlag",
        "kind": 2,
        "importPath": "yml.main",
        "description": "yml.main",
        "peekOfCode": "def Spine_mlag():\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_1/Spine.yml\")\n    print(\"SPINE_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_2/Spine.yml\")\n    print(\"SPINE_3\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_2/Spine_3/Spine.yml\")\n    print(\"SPINE_4\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_2/Spine_4/Spine.yml\")\ndef mlag():",
        "detail": "yml.main",
        "documentation": {}
    },
    {
        "label": "mlag",
        "kind": 2,
        "importPath": "yml.main",
        "description": "yml.main",
        "peekOfCode": "def mlag():\n    print(\"✅ Connectivity test\")\n    if run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/connectivity/get-version.yml\"):\n        print(\"✅\")\n        Leaf_mlag()\n        Spine_mlag()\n    else:\n        print(\"❌ Error : network unreachable\")\ndef bgp():\n    print(\"BGP\")",
        "detail": "yml.main",
        "documentation": {}
    },
    {
        "label": "bgp",
        "kind": 2,
        "importPath": "yml.main",
        "description": "yml.main",
        "peekOfCode": "def bgp():\n    print(\"BGP\")\n    print(\"NO MLAG SPINE\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/no_mlag_spine.yml\")\ndef main():\n    #mlag()\n    bgp()\nif __name__ == '__main__':\n    main()",
        "detail": "yml.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "yml.main",
        "description": "yml.main",
        "peekOfCode": "def main():\n    #mlag()\n    bgp()\nif __name__ == '__main__':\n    main()",
        "detail": "yml.main",
        "documentation": {}
    },
    {
        "label": "mlag_on_leaf",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def mlag_on_leaf():\n    print(\"Création du Port Channel\")\ndef main():\n    print(welcome)\n    fabric_info = input_fabric()\n    admin_user = fabric_info['admin_user']\n    admin_password = fabric_info['password']\n    save_to_json(admin_user,admin_password,fabric_info)\n    init()\n    connection = run_ansible_playbook(\"Ansible/connectivity/get-version.yml\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    print(welcome)\n    fabric_info = input_fabric()\n    admin_user = fabric_info['admin_user']\n    admin_password = fabric_info['password']\n    save_to_json(admin_user,admin_password,fabric_info)\n    init()\n    connection = run_ansible_playbook(\"Ansible/connectivity/get-version.yml\")\n    if connection : \n        print(f\"{orange} Test de connexion réussie \\n MLAG configuration \")",
        "detail": "main",
        "documentation": {}
    }
]