[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "stringify",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "flatted",
        "description": "flatted",
        "isExtraImport": true,
        "detail": "flatted",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SSHClient",
        "importPath": "paramiko",
        "description": "paramiko",
        "isExtraImport": true,
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SSHClient",
        "importPath": "paramiko",
        "description": "paramiko",
        "isExtraImport": true,
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SSHClient",
        "importPath": "paramiko",
        "description": "paramiko",
        "isExtraImport": true,
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SSHClient",
        "importPath": "paramiko",
        "description": "paramiko",
        "isExtraImport": true,
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SCPClient",
        "importPath": "scp",
        "description": "scp",
        "isExtraImport": true,
        "detail": "scp",
        "documentation": {}
    },
    {
        "label": "SCPClient",
        "importPath": "scp",
        "description": "scp",
        "isExtraImport": true,
        "detail": "scp",
        "documentation": {}
    },
    {
        "label": "SCPClient",
        "importPath": "scp",
        "description": "scp",
        "isExtraImport": true,
        "detail": "scp",
        "documentation": {}
    },
    {
        "label": "SCPClient",
        "importPath": "scp",
        "description": "scp",
        "isExtraImport": true,
        "detail": "scp",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "insert_record_device",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "bgp",
        "importPath": "Labs.bgp",
        "description": "Labs.bgp",
        "isExtraImport": true,
        "detail": "Labs.bgp",
        "documentation": {}
    },
    {
        "label": "vxlan",
        "importPath": "Labs.vxlan",
        "description": "Labs.vxlan",
        "isExtraImport": true,
        "detail": "Labs.vxlan",
        "documentation": {}
    },
    {
        "label": "evpn",
        "importPath": "Labs.evpn",
        "description": "Labs.evpn",
        "isExtraImport": true,
        "detail": "Labs.evpn",
        "documentation": {}
    },
    {
        "label": "mlag",
        "importPath": "Labs.mlag",
        "description": "Labs.mlag",
        "isExtraImport": true,
        "detail": "Labs.mlag",
        "documentation": {}
    },
    {
        "label": "reset",
        "importPath": "reset",
        "description": "reset",
        "isExtraImport": true,
        "detail": "reset",
        "documentation": {}
    },
    {
        "label": "mlag_file",
        "importPath": "MLAG.mlag_file",
        "description": "MLAG.mlag_file",
        "isExtraImport": true,
        "detail": "MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "mlag_file_manual",
        "importPath": "MLAG.mlag_file",
        "description": "MLAG.mlag_file",
        "isExtraImport": true,
        "detail": "MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "bgp_file",
        "importPath": "BGP.bgp_file",
        "description": "BGP.bgp_file",
        "isExtraImport": true,
        "detail": "BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "bgp_file_manual",
        "importPath": "BGP.bgp_file",
        "description": "BGP.bgp_file",
        "isExtraImport": true,
        "detail": "BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "vxlan_file",
        "importPath": "VXLAN.vxlan_file",
        "description": "VXLAN.vxlan_file",
        "isExtraImport": true,
        "detail": "VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "vxlan_file_manual",
        "importPath": "VXLAN.vxlan_file",
        "description": "VXLAN.vxlan_file",
        "isExtraImport": true,
        "detail": "VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.flatted",
        "description": "node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "def stringify(value):\n    return _stringify(value, separators=(',', ':'))\nassert stringify([None, None]) == '[[null,null]]'\na = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a = []\no = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o = {}\nassert stringify(a) == '[[]]'\nassert stringify(o) == '[{}]'\na.append(a)\no['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['o']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['o'] = o\nassert stringify(a) == '[[\"0\"]]'\nassert stringify(o) == '[{\"o\":\"0\"}]'\nb = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "b = parse(stringify(a))\nassert isinstance(b, list) and b[0] == b\na.append(1)\na.append('two')\na.append(True)\no['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['one']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['one'] = 1\no['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['two']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['two'] = 'two'\no['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['three']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['three'] = True\nassert stringify(a) == '[[\"0\",1,\"1\",true],\"two\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true},\"two\"]'\na.append(o)\no['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['a']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['a'] = a\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\"}]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\"},\"two\",[\"2\",1,\"1\",true,\"0\"]]'\na.append({'test': 'OK'})\na.append([1, 2, 3])\no['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['test']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['test'] = {'test': 'OK'}\no['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o['array']",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o['array'] = [1, 2, 3]\nassert stringify(a) == '[[\"0\",1,\"1\",true,\"2\",\"3\",\"4\"],\"two\",{\"o\":\"2\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"0\",\"test\":\"3\",\"array\":\"4\"},{\"test\":\"5\"},[1,2,3],\"OK\"]'\nassert stringify(o) == '[{\"o\":\"0\",\"one\":1,\"two\":\"1\",\"three\":true,\"a\":\"2\",\"test\":\"3\",\"array\":\"4\"},\"two\",[\"2\",1,\"1\",true,\"0\",\"3\",\"4\"],{\"test\":\"5\"},[1,2,3],\"OK\"]'\na2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "a2 = parse(stringify(a));\no2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "o2",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "o2 = parse(stringify(o));\nassert a2[0] == a2\nassert o2['o'] == o2\nassert a2[1] == 1 and a2[2] == 'two' and a2[3] == True and isinstance(a2[4], dict)\nassert a2[4] == a2[4]['o'] and a2 == a2[4]['o']['a']\nstr = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "str = parse('[{\"prop\":\"1\",\"a\":\"2\",\"b\":\"3\"},{\"value\":123},[\"4\",\"5\"],{\"e\":\"6\",\"t\":\"7\",\"p\":4},{},{\"b\":\"8\"},\"f\",{\"a\":\"9\"},[\"10\"],\"sup\",{\"a\":1,\"d\":2,\"c\":\"7\",\"z\":\"11\",\"h\":1},{\"g\":2,\"a\":\"7\",\"b\":\"12\",\"f\":6},{\"r\":4,\"u\":\"7\",\"c\":5}]')\nassert str['b']['t']['a'] == 'sup' and str['a'][1]['b'][0]['c'] == str['b']['t']\noo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "oo",
        "kind": 5,
        "importPath": "node_modules.flatted.python.test",
        "description": "node_modules.flatted.python.test",
        "peekOfCode": "oo = parse('[{\"a\":\"1\",\"b\":\"0\",\"c\":\"2\"},{\"aa\":\"3\"},{\"ca\":\"4\",\"cb\":\"5\",\"cc\":\"6\",\"cd\":\"7\",\"ce\":\"8\",\"cf\":\"9\"},{\"aaa\":\"10\"},{\"caa\":\"4\"},{\"cba\":\"5\"},{\"cca\":\"2\"},{\"cda\":\"4\"},\"value2\",\"value3\",\"value1\"]');\nassert oo['a']['aa']['aaa'] == 'value1' and oo == oo['b'] and oo['c']['ca']['caa'] == oo['c']['ca']\nprint('OK')",
        "detail": "node_modules.flatted.python.test",
        "documentation": {}
    },
    {
        "label": "ssh_scp_files",
        "kind": 2,
        "importPath": "python.BGP.bgp_file",
        "description": "python.BGP.bgp_file",
        "peekOfCode": "def ssh_scp_files(ssh_host, ssh_user, ssh_password, source_volume, destination_volume):\n    logging.info(\"In ssh_scp_files() method, copying files to the server\")\n    ssh = SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)\n    with SCPClient(ssh.get_transport()) as scp:\n        scp.put(source_volume, recursive=True, remote_path=destination_volume)\ndef execute_scp_command_manual(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")",
        "detail": "python.BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "execute_scp_command_manual",
        "kind": 2,
        "importPath": "python.BGP.bgp_file",
        "description": "python.BGP.bgp_file",
        "peekOfCode": "def execute_scp_command_manual(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "execute_scp_command",
        "kind": 2,
        "importPath": "python.BGP.bgp_file",
        "description": "python.BGP.bgp_file",
        "peekOfCode": "def execute_scp_command(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/bgp-file/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.BGP.bgp_file",
        "description": "python.BGP.bgp_file",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef bgp_file():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")",
        "detail": "python.BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "bgp_file",
        "kind": 2,
        "importPath": "python.BGP.bgp_file",
        "description": "python.BGP.bgp_file",
        "peekOfCode": "def bgp_file():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\ndef bgp_file_manual():\n    execute_scp_command_manual(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\nif __name__ == '__main__':\n    bgp_file()",
        "detail": "python.BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "bgp_file_manual",
        "kind": 2,
        "importPath": "python.BGP.bgp_file",
        "description": "python.BGP.bgp_file",
        "peekOfCode": "def bgp_file_manual():\n    execute_scp_command_manual(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\nif __name__ == '__main__':\n    bgp_file()",
        "detail": "python.BGP.bgp_file",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.Labs.bgp",
        "description": "python.Labs.bgp",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True  \ndef bgp():\n    print(\"BGP\")",
        "detail": "python.Labs.bgp",
        "documentation": {}
    },
    {
        "label": "bgp",
        "kind": 2,
        "importPath": "python.Labs.bgp",
        "description": "python.Labs.bgp",
        "peekOfCode": "def bgp():\n    print(\"BGP\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/BGP/NO_MLAG/no_mlag_spine.yml\")\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/BGP/Spine/Spine_1/Spine.yml\")\n    print(\"SPINE_2\")    \n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/BGP/Spine/Spine_2/Spine.yml\")\n    print(\"SPINE_3\") \n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/BGP/Spine/Spine_3/Spine.yml\")\n    print(\"SPINE_4\") ",
        "detail": "python.Labs.bgp",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.Labs.evpn",
        "description": "python.Labs.evpn",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True  \ndef ssh_connection(ip, bgp_router_id,rd_ip):\n    client = paramiko.SSHClient()",
        "detail": "python.Labs.evpn",
        "documentation": {}
    },
    {
        "label": "ssh_connection",
        "kind": 2,
        "importPath": "python.Labs.evpn",
        "description": "python.Labs.evpn",
        "peekOfCode": "def ssh_connection(ip, bgp_router_id,rd_ip):\n    client = paramiko.SSHClient()\n    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    client.connect(ip, port=22, username=\"cvpadmin\", password=\"Exaprobe1234\")\n    shell_session = client.invoke_shell()\n    shell_session.send(\"configure\\n\")\n    time.sleep(1)\n    shell_session.send(f\"router bgp {bgp_router_id}\\n\")\n    time.sleep(1)\n    shell_session.send(\"vlan 3\\n\")",
        "detail": "python.Labs.evpn",
        "documentation": {}
    },
    {
        "label": "evpn",
        "kind": 2,
        "importPath": "python.Labs.evpn",
        "description": "python.Labs.evpn",
        "peekOfCode": "def evpn():\n    print(\"EVPN\")\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/EVPN/Spine/Spine_1/Spine.yml\")\n    print(\"SPINE_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/EVPN/Spine/Spine_2/Spine.yml\")\n    print(\"SPINE_3\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/EVPN/Spine/Spine_3/Spine.yml\")\n    print(\"SPINE_4\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/EVPN/Spine/Spine_4/Spine.yml\")",
        "detail": "python.Labs.evpn",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.Labs.mlag",
        "description": "python.Labs.mlag",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True )\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef Leaf_mlag():\n    print(\"LEAF_1\")",
        "detail": "python.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "Leaf_mlag",
        "kind": 2,
        "importPath": "python.Labs.mlag",
        "description": "python.Labs.mlag",
        "peekOfCode": "def Leaf_mlag():\n    print(\"LEAF_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/MLAG/Peer_Link_Leef/peer_link_1/Leaf_1/Leaf1.yml\")\n    data = {  'leaf1': True }\n    insert_record_device(data,\"leaf1\")\n    print(\"LEAF_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/MLAG/Peer_Link_Leef/peer_link_1/Leaf_2/Leaf2.yml\")\n    data = { 'leaf2': True }\n    insert_record_device(data,\"leaf2\")\n    print(\"LEAF_3\")",
        "detail": "python.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "Spine_mlag",
        "kind": 2,
        "importPath": "python.Labs.mlag",
        "description": "python.Labs.mlag",
        "peekOfCode": "def Spine_mlag():\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_1/Spine.yml\")\n    data = {  'spine1': True }\n    insert_record_device(data,\"spine1\")\n    print(\"SPINE_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_2/Spine.yml\")\n    data = {'spine2': True }\n    insert_record_device(data,\"spine2\")\n    print(\"SPINE_3\")",
        "detail": "python.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "Host_mlag",
        "kind": 2,
        "importPath": "python.Labs.mlag",
        "description": "python.Labs.mlag",
        "peekOfCode": "def Host_mlag():\n    print(\"HOST\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_1/Spine.yml\")\ndef mlag():\n    print(\"✅ Connectivity test\")\n    test = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/connectivity/get-version.yml\")\n    if test:\n        print(\"✅\")\n        Leaf_mlag()\n        Spine_mlag()",
        "detail": "python.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "mlag",
        "kind": 2,
        "importPath": "python.Labs.mlag",
        "description": "python.Labs.mlag",
        "peekOfCode": "def mlag():\n    print(\"✅ Connectivity test\")\n    test = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/connectivity/get-version.yml\")\n    if test:\n        print(\"✅\")\n        Leaf_mlag()\n        Spine_mlag()\n        return True\n    else:\n        print(\"❌ Error : network unreachable\")",
        "detail": "python.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.Labs.vxlan",
        "description": "python.Labs.vxlan",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False \n    else:\n        return True\ndef vxlan():\n    print(\"VXLAN\")",
        "detail": "python.Labs.vxlan",
        "documentation": {}
    },
    {
        "label": "vxlan",
        "kind": 2,
        "importPath": "python.Labs.vxlan",
        "description": "python.Labs.vxlan",
        "peekOfCode": "def vxlan():\n    print(\"VXLAN\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/I/Leaf_1/Leaf1.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/I/Leaf_2/Leaf2.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/I/Leaf_3/Leaf3.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/I/Leaf_4/Leaf4.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/II/Leaf_5/Leaf5.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/II/Leaf_6/Leaf6.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/II/Leaf_7/Leaf7.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/VXLAN/Leaf/II/Leaf_8/Leaf8.yml\")",
        "detail": "python.Labs.vxlan",
        "documentation": {}
    },
    {
        "label": "ssh_scp_files",
        "kind": 2,
        "importPath": "python.MLAG.mlag_file",
        "description": "python.MLAG.mlag_file",
        "peekOfCode": "def ssh_scp_files(ssh_host, ssh_user, ssh_password, source_volume, destination_volume):\n    logging.info(\"In ssh_scp_files() method, copying files to the server\")\n    ssh = SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)\n    with SCPClient(ssh.get_transport()) as scp:\n        scp.put(source_volume, recursive=True, remote_path=destination_volume)\ndef execute_scp_command_manual(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")",
        "detail": "python.MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "execute_scp_command_manual",
        "kind": 2,
        "importPath": "python.MLAG.mlag_file",
        "description": "python.MLAG.mlag_file",
        "peekOfCode": "def execute_scp_command_manual(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "execute_scp_command",
        "kind": 2,
        "importPath": "python.MLAG.mlag_file",
        "description": "python.MLAG.mlag_file",
        "peekOfCode": "def execute_scp_command(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/mlag-file/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.MLAG.mlag_file",
        "description": "python.MLAG.mlag_file",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef mlag_file():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")",
        "detail": "python.MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "mlag_file",
        "kind": 2,
        "importPath": "python.MLAG.mlag_file",
        "description": "python.MLAG.mlag_file",
        "peekOfCode": "def mlag_file():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\ndef mlag_file_manual():\n    execute_scp_command_manual(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\nif __name__ == '__main__':\n    mlag_file()",
        "detail": "python.MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "mlag_file_manual",
        "kind": 2,
        "importPath": "python.MLAG.mlag_file",
        "description": "python.MLAG.mlag_file",
        "peekOfCode": "def mlag_file_manual():\n    execute_scp_command_manual(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\nif __name__ == '__main__':\n    mlag_file()",
        "detail": "python.MLAG.mlag_file",
        "documentation": {}
    },
    {
        "label": "ssh_scp_files",
        "kind": 2,
        "importPath": "python.VXLAN.vxlan_file",
        "description": "python.VXLAN.vxlan_file",
        "peekOfCode": "def ssh_scp_files(ssh_host, ssh_user, ssh_password, source_volume, destination_volume):\n    logging.info(\"In ssh_scp_files() method, copying files to the server\")\n    ssh = SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)\n    with SCPClient(ssh.get_transport()) as scp:\n        scp.put(source_volume, recursive=True, remote_path=destination_volume)\ndef execute_scp_command_manual(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")",
        "detail": "python.VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "execute_scp_command_manual",
        "kind": 2,
        "importPath": "python.VXLAN.vxlan_file",
        "description": "python.VXLAN.vxlan_file",
        "peekOfCode": "def execute_scp_command_manual(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "execute_scp_command",
        "kind": 2,
        "importPath": "python.VXLAN.vxlan_file",
        "description": "python.VXLAN.vxlan_file",
        "peekOfCode": "def execute_scp_command(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/vxlan-file/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.VXLAN.vxlan_file",
        "description": "python.VXLAN.vxlan_file",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef vxlan_file():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")",
        "detail": "python.VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "vxlan_file",
        "kind": 2,
        "importPath": "python.VXLAN.vxlan_file",
        "description": "python.VXLAN.vxlan_file",
        "peekOfCode": "def vxlan_file():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\ndef vxlan_file_manual():\n    execute_scp_command_manual(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\nif __name__ == '__main__':\n    vxlan_file()",
        "detail": "python.VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "vxlan_file_manual",
        "kind": 2,
        "importPath": "python.VXLAN.vxlan_file",
        "description": "python.VXLAN.vxlan_file",
        "peekOfCode": "def vxlan_file_manual():\n    execute_scp_command_manual(\"Exaprobe1234\" , \"cvpadmin\")\n    playbook = run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    return playbook\nif __name__ == '__main__':\n    vxlan_file()",
        "detail": "python.VXLAN.vxlan_file",
        "documentation": {}
    },
    {
        "label": "receive_lab_type",
        "kind": 2,
        "importPath": "python.api",
        "description": "python.api",
        "peekOfCode": "def receive_lab_type():\n    try:\n        data = request.get_json()\n        return_to_zero_device_record()\n        print(f\"Received data: {data}\")\n        lab_type = data.get('lab')\n        print(f\"Received lab type: {lab_type}\")\n        data = {\n            'statut': 'started',  \n            'lab': lab_type,     ",
        "detail": "python.api",
        "documentation": {}
    },
    {
        "label": "send_lab_status",
        "kind": 2,
        "importPath": "python.api",
        "description": "python.api",
        "peekOfCode": "def send_lab_status():\n    try:    \n            statut , labs = read_records()\n            device_statut = read_device_records()\n            host1 = device_statut[0]['host1']\n            host2 = device_statut[0]['host2']\n            host3 = device_statut[0]['host3']\n            host4 = device_statut[0]['host4']\n            leaf1 = device_statut[0]['leaf1']\n            leaf2 = device_statut[0]['leaf2']",
        "detail": "python.api",
        "documentation": {}
    },
    {
        "label": "call_lab_function",
        "kind": 2,
        "importPath": "python.api",
        "description": "python.api",
        "peekOfCode": "def call_lab_function(lab_type):\n    if lab_type == 'bgp':\n        response = bgp_file()\n        return response\n    elif lab_type == 'mlag':\n        response = mlag_file()\n        return response\n    elif lab_type == 'vxlan evpn':\n        response = vxlan_file()\n        return response",
        "detail": "python.api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "python.api",
        "description": "python.api",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\n@app.route('/python/post', methods=['POST'])\ndef receive_lab_type():\n    try:\n        data = request.get_json()\n        return_to_zero_device_record()\n        print(f\"Received data: {data}\")\n        lab_type = data.get('lab')\n        print(f\"Received lab type: {lab_type}\")",
        "detail": "python.api",
        "documentation": {}
    },
    {
        "label": "update_record",
        "kind": 2,
        "importPath": "python.database",
        "description": "python.database",
        "peekOfCode": "def update_record(data):\n    conn_params = {\n        'dbname': 'lab',\n        'user': 'rais',\n        'password': 'rais',\n        'host': 'localhost',\n        'port': '5432'\n    }\n    table = 'regular.lab'\n    update_query = f\"\"\"",
        "detail": "python.database",
        "documentation": {}
    },
    {
        "label": "insert_record_device",
        "kind": 2,
        "importPath": "python.database",
        "description": "python.database",
        "peekOfCode": "def insert_record_device(data, device):\n    # Set the ID for the record to be updated\n    record_id = 1\n    conn_params = {\n        'dbname': 'lab',\n        'user': 'rais',\n        'password': 'rais',\n        'host': 'localhost',\n        'port': '5432'\n    }",
        "detail": "python.database",
        "documentation": {}
    },
    {
        "label": "read_records",
        "kind": 2,
        "importPath": "python.database",
        "description": "python.database",
        "peekOfCode": "def read_records():\n    conn_params = {\n        'dbname': 'lab',\n        'user': 'rais',\n        'password': 'rais',\n        'host': 'localhost',\n        'port': '5432'\n    }\n    table = 'regular.lab'\n    select_query = f\"SELECT statut, lab FROM {table}\"",
        "detail": "python.database",
        "documentation": {}
    },
    {
        "label": "return_to_zero_device_record",
        "kind": 2,
        "importPath": "python.database",
        "description": "python.database",
        "peekOfCode": "def return_to_zero_device_record():\n    conn_params = {\n        'dbname': 'lab',\n        'user': 'rais',\n        'password': 'rais',\n        'host': 'localhost',\n        'port': '5432'\n    }\n    table = 'regular.device'\n    update_query = f\"\"\"",
        "detail": "python.database",
        "documentation": {}
    },
    {
        "label": "read_device_records",
        "kind": 2,
        "importPath": "python.database",
        "description": "python.database",
        "peekOfCode": "def read_device_records():\n    conn_params = {\n        'dbname': 'lab',\n        'user': 'rais',\n        'password': 'rais',\n        'host': 'localhost',\n        'port': '5432'\n    }\n    table = 'regular.device'\n    select_query = f\"SELECT host1, host2, host3, host4, leaf1, leaf2, leaf3, leaf4, leaf5, leaf6, leaf7, leaf8, spine1, spine2, spine3, spine4 FROM {table}\"",
        "detail": "python.database",
        "documentation": {}
    },
    {
        "label": "insert_record_device",
        "kind": 2,
        "importPath": "python.insert_record_device",
        "description": "python.insert_record_device",
        "peekOfCode": "def insert_record_device(data, device):\n    record_id = 1\n    conn_params = {\n        'dbname': 'lab',\n        'user': 'rais',\n        'password': 'rais',\n        'host': 'localhost',\n        'port': '5432'\n    }\n    table = 'regular.device'",
        "detail": "python.insert_record_device",
        "documentation": {}
    },
    {
        "label": "ssh_scp_files",
        "kind": 2,
        "importPath": "python.reset",
        "description": "python.reset",
        "peekOfCode": "def ssh_scp_files(ssh_host, ssh_user, ssh_password, source_volume, destination_volume):\n    # logging.info(\"In ssh_scp_files() method, copying files to the server\")\n    ssh = SSHClient()\n    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)\n    with SCPClient(ssh.get_transport()) as scp:\n        scp.put(source_volume, recursive=True, remote_path=destination_volume)\ndef execute_scp_command(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/basic-config/Spine/1/conf.txt\", \"/home/cvpadmin/\")",
        "detail": "python.reset",
        "documentation": {}
    },
    {
        "label": "execute_scp_command",
        "kind": 2,
        "importPath": "python.reset",
        "description": "python.reset",
        "peekOfCode": "def execute_scp_command(password, user):\n    print(\"SPINE 1\")\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/python/usb/basic-config/Spine/1/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 2\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/python/usb/basic-config/Spine/2/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 3\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/python/usb/basic-config/Spine/3/conf.txt\", \"/home/cvpadmin/\")\n    print(\"SPINE 4\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/python/usb/basic-config/Spine/4/conf.txt\", \"/home/cvpadmin/\")\n    print(\"LEAF 1\")",
        "detail": "python.reset",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "python.reset",
        "description": "python.reset",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef reset():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")",
        "detail": "python.reset",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "python.reset",
        "description": "python.reset",
        "peekOfCode": "def reset():\n    execute_scp_command(\"Exaprobe1234\" , \"cvpadmin\")\n    print(\"ANSBILE PLAYBOOK\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/python/Ansible/TEST/Reset_basic_config/Reset_Conf/host.yml\")\n    print(\"ANSBILE PLAYBOOK end\")\n    return True\nif __name__ == '__main__':\n    reset()",
        "detail": "python.reset",
        "documentation": {}
    }
]