[
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "consolemenu",
        "description": "consolemenu",
        "isExtraImport": true,
        "detail": "consolemenu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "consolemenu.items",
        "description": "consolemenu.items",
        "isExtraImport": true,
        "detail": "consolemenu.items",
        "documentation": {}
    },
    {
        "label": "terminal",
        "importPath": "Tools.Terminal.console_menu",
        "description": "Tools.Terminal.console_menu",
        "isExtraImport": true,
        "detail": "Tools.Terminal.console_menu",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "connect_to_arista_switch",
        "importPath": "Arista.make_eapi_active",
        "description": "Arista.make_eapi_active",
        "isExtraImport": true,
        "detail": "Arista.make_eapi_active",
        "documentation": {}
    },
    {
        "label": "Server",
        "importPath": "jsonrpclib",
        "description": "jsonrpclib",
        "isExtraImport": true,
        "detail": "jsonrpclib",
        "documentation": {}
    },
    {
        "label": "connect_to_arista_switch",
        "kind": 2,
        "importPath": "Arista.make_eapi_active",
        "description": "Arista.make_eapi_active",
        "peekOfCode": "def connect_to_arista_switch(hostname, username, password):\n    try:\n        # Connexion SSH\n        client = paramiko.SSHClient()\n        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        client.connect(hostname=hostname, username=username, password=password, timeout=10)\n        # Création d'un canal interactif\n        channel = client.invoke_shell()\n        # Attente de l'invite de commande\n        while not channel.recv_ready():",
        "detail": "Arista.make_eapi_active",
        "documentation": {}
    },
    {
        "label": "terminal",
        "kind": 2,
        "importPath": "Tools.Terminal.console_menu",
        "description": "Tools.Terminal.console_menu",
        "peekOfCode": "def terminal():\n    menu = ConsoleMenu(\"Net-Framework\", \"Arista\")\n    # Create some items\n    # MenuItem is the base class for all items, it doesn't do anything when selected\n    menu_item = MenuItem(\"Menu Item\")\n    # A FunctionItem runs a Python function when selected\n    function_item = FunctionItem(\"Call a Python function\", input, [\"Enter an input\"])\n    # A CommandItem runs a console command\n    command_item = CommandItem(\"Run a console command\",  \"touch hello.txt\")\n    # A SelectionMenu constructs a menu from a list of strings",
        "detail": "Tools.Terminal.console_menu",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "Tools.Terminal.input",
        "description": "Tools.Terminal.input",
        "peekOfCode": "def input():",
        "detail": "Tools.Terminal.input",
        "documentation": {}
    },
    {
        "label": "get_ip_addresses",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_ip_addresses():\n    switch = {}\n    for spine_number in range(1, 3):\n        spine_ip = input(f\"Veuillez saisir l'adresse IP du Spine {spine_number}: \")\n        spine_user = input(f\"Veuillez saisir l'utilisateur du Spine {spine_number}: \")\n        spine_pswd = input(f\"Veuillez saisir le mot de passe du Spine {spine_number}: \")\n        switch[f\"Spine {spine_number}\"] = {\"ip\": spine_ip, \"user\": spine_user, \"password\": spine_pswd}\n    for leaf_number in range(1, 5):\n        leaf_ip = input(f\"Veuillez saisir l'adresse IP du Leaf {leaf_number}: \")\n        leaf_user = input(f\"Veuillez saisir l'utilisateur du Leaf {leaf_number}: \")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "generate_inventory",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def generate_inventory(ip_addresses):\n    config = configparser.ConfigParser()\n    for device, details in ip_addresses.items():\n        config[device] = {\"ansible_host\": details[\"ip\"], \"ansible_user\": details[\"user\"], \"ansible_password\": details[\"password\"]}\n    with open('Ansible/inventory.ini', 'w') as configfile:\n        config.write(configfile)\n    print(\"Fichier inventory.ini généré avec succès.\")\ndef generate_cfg(ip_addresses):\n    with open('Ansible/config.cfg', 'w') as cfg_file:\n        for device, details in ip_addresses.items():",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "generate_cfg",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def generate_cfg(ip_addresses):\n    with open('Ansible/config.cfg', 'w') as cfg_file:\n        for device, details in ip_addresses.items():\n            cfg_file.write(f\"{device}: IP = {details['ip']}, User = {details['user']}, Password = {details['password']}\\n\")\n    print(\"Fichier config.cfg généré avec succès.\")\ndef main():\n    equipement = get_ip_addresses()\n    print(\"Adresses IP des équipements:\")\n    for device, details in equipement.items():\n        print(f\"{device}: IP = {details['ip']}, User = {details['user']}, Password = {details['password']}\")",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    equipement = get_ip_addresses()\n    print(\"Adresses IP des équipements:\")\n    for device, details in equipement.items():\n        print(f\"{device}: IP = {details['ip']}, User = {details['user']}, Password = {details['password']}\")\n    while True:\n        cli = input(\"Est-ce correct ? (o/n) : \")\n        if cli.lower() == \"o\":\n            generate_inventory(equipement)\n            generate_cfg(equipement)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "switch",
        "kind": 5,
        "importPath": "z",
        "description": "z",
        "peekOfCode": "switch = Server (\"http://cvpadmin:eve@10.43.193.148/\")\nresponse = switch.runCmds( 1, [\"show version\"] )\nprint(response)",
        "detail": "z",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "z",
        "description": "z",
        "peekOfCode": "response = switch.runCmds( 1, [\"show version\"] )\nprint(response)",
        "detail": "z",
        "documentation": {}
    }
]