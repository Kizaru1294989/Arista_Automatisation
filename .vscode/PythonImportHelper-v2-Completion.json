[
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "colors",
        "importPath": "Tools.Color",
        "description": "Tools.Color",
        "isExtraImport": true,
        "detail": "Tools.Color",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "consolemenu",
        "description": "consolemenu",
        "isExtraImport": true,
        "detail": "consolemenu",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "consolemenu.items",
        "description": "consolemenu.items",
        "isExtraImport": true,
        "detail": "consolemenu.items",
        "documentation": {}
    },
    {
        "label": "input_fabric",
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "isExtraImport": true,
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "welcome",
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "isExtraImport": true,
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "save_to_json",
        "importPath": "Tools.Json.convert_to_json",
        "description": "Tools.Json.convert_to_json",
        "isExtraImport": true,
        "detail": "Tools.Json.convert_to_json",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "isExtraImport": true,
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "green = \"\\x1b[32m\"\nblue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "blue",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "blue = \"\\x1b[34m\"\nred = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "red = \"\\x1b[31m\"\norange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "orange",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "orange = \"\\x1b[38;5;220m\"\nrainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "rainbow",
        "kind": 5,
        "importPath": "Tools.Color.colors",
        "description": "Tools.Color.colors",
        "peekOfCode": "rainbow = \"\\x1b[31mS\\x1b[33mp\\x1b[32my\\x1b[36mw\\x1b[34ma\\x1b[35mr\\x1b[31me\\x1b[0m\"",
        "detail": "Tools.Color.colors",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "def init():\n    make_config_file()\n    generate_ansible_yaml(\"Ansible/connectivity/get-version.yml\")\ndef generate_ansible_yaml(filename):\n    yaml_content = f\"\"\"---\n- name: Run commands on remote cEOS-lab device\n  hosts: arista\n  connection: httpapi\n  gather_facts: no\n  vars:",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "generate_ansible_yaml",
        "kind": 2,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "def generate_ansible_yaml(filename):\n    yaml_content = f\"\"\"---\n- name: Run commands on remote cEOS-lab device\n  hosts: arista\n  connection: httpapi\n  gather_facts: no\n  vars:\n    ansible_python_interpreter: \"python\"\n  tasks:\n    - name: Execute Arista EOS command",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "make_config_file",
        "kind": 2,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "def make_config_file():\n    config_data = \"\"\"\n[defaults]\ninventory = ./hosts.json\nhost_key_checking = False\nroles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"\n    file_path = \"Ansible/connectivity/ansible.cfg\"\n    with open(file_path, \"w\") as f:",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "inventory",
        "kind": 5,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "inventory = ./hosts.json\nhost_key_checking = False\nroles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"\n    file_path = \"Ansible/connectivity/ansible.cfg\"\n    with open(file_path, \"w\") as f:\n        f.write(config_data)\n        print(\"✅ ansible.cfg créé avec succès\")",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "host_key_checking",
        "kind": 5,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "host_key_checking = False\nroles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"\n    file_path = \"Ansible/connectivity/ansible.cfg\"\n    with open(file_path, \"w\") as f:\n        f.write(config_data)\n        print(\"✅ ansible.cfg créé avec succès\")",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "roles_path",
        "kind": 5,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "roles_path = roles.galaxy:roles\nstdout_callback = yaml\n                \"\"\"\n    file_path = \"Ansible/connectivity/ansible.cfg\"\n    with open(file_path, \"w\") as f:\n        f.write(config_data)\n        print(\"✅ ansible.cfg créé avec succès\")",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "stdout_callback",
        "kind": 5,
        "importPath": "Tools.Config.make_config_file",
        "description": "Tools.Config.make_config_file",
        "peekOfCode": "stdout_callback = yaml\n                \"\"\"\n    file_path = \"Ansible/connectivity/ansible.cfg\"\n    with open(file_path, \"w\") as f:\n        f.write(config_data)\n        print(\"✅ ansible.cfg créé avec succès\")",
        "detail": "Tools.Config.make_config_file",
        "documentation": {}
    },
    {
        "label": "validate_ip",
        "kind": 2,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "def validate_ip(ip):\n    ip_pattern = re.compile(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/([0-9]|[1-2][0-9]|3[0-2])$\")\n    return bool(ip_pattern.match(ip))\ndef input_fabric():\n    admin_user = input(f\"{colors.orange}Veuillez entrer le admin user : \")\n    admin_password = input(f\"{colors.orange}Veuillez entrer le mot de passe admin user : \")\n    while admin_user.strip() == \"\" or admin_password.strip() == \"\":\n        print(\"❌ L'entrée ne peut pas être vide.\")\n        input_fabric()\n    fabric = {'admin_user': admin_user",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "input_fabric",
        "kind": 2,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "def input_fabric():\n    admin_user = input(f\"{colors.orange}Veuillez entrer le admin user : \")\n    admin_password = input(f\"{colors.orange}Veuillez entrer le mot de passe admin user : \")\n    while admin_user.strip() == \"\" or admin_password.strip() == \"\":\n        print(\"❌ L'entrée ne peut pas être vide.\")\n        input_fabric()\n    fabric = {'admin_user': admin_user\n              ,'password' : admin_password\n              ,'leafs': {}\n              , 'spines': {}",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "welcome",
        "kind": 5,
        "importPath": "Tools.Input.input",
        "description": "Tools.Input.input",
        "peekOfCode": "welcome = f\"\"\"{colors.red}\n  ___       _     _        \n / _ \\     (_)   | |       \n/ /_\\ \\_ __ _ ___| |_ __ _ \n|  _  | '__| / __| __/ _` |\n| | | | |  | \\__ \\ || (_| |\n\\_| |_/_|  |_|___/\\__\\__,_|\n\"\"\"\ndef validate_ip(ip):\n    ip_pattern = re.compile(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\/([0-9]|[1-2][0-9]|3[0-2])$\")",
        "detail": "Tools.Input.input",
        "documentation": {}
    },
    {
        "label": "save_to_json",
        "kind": 2,
        "importPath": "Tools.Json.convert_to_json",
        "description": "Tools.Json.convert_to_json",
        "peekOfCode": "def save_to_json(admin_user,admin_password, fabric):\n    data = {\n        \"arista\": {\n            \"hosts\": {},\n            \"vars\": {\n                \"ansible_network_os\": \"eos\",\n                \"ansible_httpapi_use_ssl\": \"yes\",\n                \"ansible_httpapi_validate_certs\": \"no\",\n                \"ansible_user\": admin_user,\n                \"ansible_httpapi_password\": admin_password",
        "detail": "Tools.Json.convert_to_json",
        "documentation": {}
    },
    {
        "label": "terminal",
        "kind": 2,
        "importPath": "Tools.Terminal.console_menu",
        "description": "Tools.Terminal.console_menu",
        "peekOfCode": "def terminal():\n    menu = ConsoleMenu(\"Net-Framework\", \"Arista\")\n    # Create some items\n    # MenuItem is the base class for all items, it doesn't do anything when selected\n    menu_item = MenuItem(\"Menu Item\")\n    # A FunctionItem runs a Python function when selected\n    function_item = FunctionItem(\"Call a Python function\", input, [\"Enter an input\"])\n    # A CommandItem runs a console command\n    command_item = CommandItem(\"Run a console command\",  \"touch hello.txt\")\n    # A SelectionMenu constructs a menu from a list of strings",
        "detail": "Tools.Terminal.console_menu",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "Tools.Terminal.input",
        "description": "Tools.Terminal.input",
        "peekOfCode": "def input():",
        "detail": "Tools.Terminal.input",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    print(welcome)\n    fabric_info = input_fabric()\n    admin_user = fabric_info['admin_user']\n    admin_password = fabric_info['password']\n    save_to_json(admin_user,admin_password,fabric_info)\n    init()\nif __name__ == '__main__':\n    main()",
        "detail": "main",
        "documentation": {}
    }
]