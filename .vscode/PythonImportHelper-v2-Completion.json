[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Labs.mlag",
        "description": "Labs.mlag",
        "isExtraImport": true,
        "detail": "Labs.mlag",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Labs.bgp",
        "description": "Labs.bgp",
        "isExtraImport": true,
        "detail": "Labs.bgp",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Labs.vxlan",
        "description": "Labs.vxlan",
        "isExtraImport": true,
        "detail": "Labs.vxlan",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Labs.evpn",
        "description": "Labs.evpn",
        "isExtraImport": true,
        "detail": "Labs.evpn",
        "documentation": {}
    },
    {
        "label": "pexpect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pexpect",
        "description": "pexpect",
        "detail": "pexpect",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SSHClient",
        "importPath": "paramiko",
        "description": "paramiko",
        "isExtraImport": true,
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "SCPClient",
        "importPath": "scp",
        "description": "scp",
        "isExtraImport": true,
        "detail": "scp",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "Backend.yml.Labs.bgp",
        "description": "Backend.yml.Labs.bgp",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True  \ndef bgp():\n    print(\"BGP\")",
        "detail": "Backend.yml.Labs.bgp",
        "documentation": {}
    },
    {
        "label": "bgp",
        "kind": 2,
        "importPath": "Backend.yml.Labs.bgp",
        "description": "Backend.yml.Labs.bgp",
        "peekOfCode": "def bgp():\n    print(\"BGP\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/connectivity/get-version.yml\")\n    print(\"NO MLAG SPINE\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/NO_MLAG/no_mlag_spine.yml\")\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/Spine/Spine_1/Spine.yml\")\n    print(\"SPINE_2\")    \n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/Spine/Spine_2/Spine.yml\")\n    print(\"SPINE_3\") ",
        "detail": "Backend.yml.Labs.bgp",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "Backend.yml.Labs.evpn",
        "description": "Backend.yml.Labs.evpn",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True  \ndef evpn():\n    print(\"EVPN\")",
        "detail": "Backend.yml.Labs.evpn",
        "documentation": {}
    },
    {
        "label": "evpn",
        "kind": 2,
        "importPath": "Backend.yml.Labs.evpn",
        "description": "Backend.yml.Labs.evpn",
        "peekOfCode": "def evpn():\n    print(\"EVPN\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/connectivity/get-version.yml\")\n    print(\"NO MLAG SPINE\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/NO_MLAG/no_mlag_spine.yml\")\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/Spine/Spine_1/Spine.yml\")\n    print(\"SPINE_2\")    \n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/BGP/Spine/Spine_2/Spine.yml\")\n    print(\"SPINE_3\") ",
        "detail": "Backend.yml.Labs.evpn",
        "documentation": {}
    },
    {
        "label": "Leaf_mlag",
        "kind": 2,
        "importPath": "Backend.yml.Labs.mlag",
        "description": "Backend.yml.Labs.mlag",
        "peekOfCode": "def Leaf_mlag():\n    print(\"MLAG PEER LINK - LEAF-1 <=> LEAF-2 \\n\")\n    print(\"LEAF_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Leef/peer_link_1/Leaf_1/Leaf1.yml\")\n    print(\"LEAF_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Leef/peer_link_1/Leaf_2/Leaf2.yml\")\n    print(\"MLAG PEER LINK - LEAF-3 <=> LEAF-4 \\n\")\n    print(\"LEAF_3\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Leef/peer_link_2/Leaf_3/Leaf3.yml\")\n    print(\"LEAF_4\")",
        "detail": "Backend.yml.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "Spine_mlag",
        "kind": 2,
        "importPath": "Backend.yml.Labs.mlag",
        "description": "Backend.yml.Labs.mlag",
        "peekOfCode": "def Spine_mlag():\n    print(\"SPINE_1\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_1/Spine.yml\")\n    print(\"SPINE_2\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_1/Spine_2/Spine.yml\")\n    print(\"SPINE_3\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_2/Spine_3/Spine.yml\")\n    print(\"SPINE_4\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/MLAG/Peer_Link_Spine/peer_link_2/Spine_4/Spine.yml\")\ndef mlag():",
        "detail": "Backend.yml.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "mlag",
        "kind": 2,
        "importPath": "Backend.yml.Labs.mlag",
        "description": "Backend.yml.Labs.mlag",
        "peekOfCode": "def mlag():\n    print(\"✅ Connectivity test\")\n    if run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/connectivity/get-version.yml\"):\n        print(\"✅\")\n        Leaf_mlag()\n        Spine_mlag()\n        return True\n    else:\n        print(\"❌ Error : network unreachable\")\n        return False",
        "detail": "Backend.yml.Labs.mlag",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "Backend.yml.Labs.vxlan",
        "description": "Backend.yml.Labs.vxlan",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef vxlan():\n    print(\"VXLAN\")",
        "detail": "Backend.yml.Labs.vxlan",
        "documentation": {}
    },
    {
        "label": "vxlan",
        "kind": 2,
        "importPath": "Backend.yml.Labs.vxlan",
        "description": "Backend.yml.Labs.vxlan",
        "peekOfCode": "def vxlan():\n    print(\"VXLAN\")\n    # run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/I/Leaf_1/Leaf1.yml\")\n    # run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/I/Leaf_2/Leaf2.yml\")\n    # run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/I/Leaf_3/Leaf3.yml\")\n    # run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/I/Leaf_4/Leaf4.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/II/Leaf_5/Leaf5.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/II/Leaf_6/Leaf6.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/II/Leaf_7/Leaf7.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/VXLAN/Leaf/II/Leaf_8/Leaf8.yml\")",
        "detail": "Backend.yml.Labs.vxlan",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Backend.yml.main",
        "description": "Backend.yml.main",
        "peekOfCode": "def main():\n    print(\"MAIN\")\n    # mlag()\n    # bgp()\n    vxlan()\n    # reponse = mlag()\n    # if reponse :\n    #     choice = input(\"Transofrm the Lab to BGP lab ? Y/N\")\n    #     if choice == \"Y\":\n    #         bgp()",
        "detail": "Backend.yml.main",
        "documentation": {}
    },
    {
        "label": "ssh_scp_files",
        "kind": 2,
        "importPath": "Backend.yml.reset",
        "description": "Backend.yml.reset",
        "peekOfCode": "def ssh_scp_files(ssh_host, ssh_user, ssh_password, source_volume, destination_volume):\n    logging.info(\"In ssh_scp_files() method, copying files to the server\")\n    ssh = SSHClient()\n    # ssh.load_system_host_keys()\n    # ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \n    ssh.connect(ssh_host, username=ssh_user, password=ssh_password, look_for_keys=False)\n    with SCPClient(ssh.get_transport()) as scp:\n        scp.put(source_volume, recursive=True, remote_path=destination_volume)\ndef execute_scp_command(password, user):\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Spine/Spine-1.txt\", \"/home/cvpadmin/\")",
        "detail": "Backend.yml.reset",
        "documentation": {}
    },
    {
        "label": "execute_scp_command",
        "kind": 2,
        "importPath": "Backend.yml.reset",
        "description": "Backend.yml.reset",
        "peekOfCode": "def execute_scp_command(password, user):\n    ssh_scp_files(\"10.43.192.25\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Spine/Spine-1.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.26\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Spine/Spine-2.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.27\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Spine/Spine-3.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.28\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Spine/Spine-4.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.29\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Leaf/Leaf-1.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.30\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Leaf/Leaf-2.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.31\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Leaf/Leaf-3.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.32\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Leaf/Leaf-4.txt\", \"/home/cvpadmin/\")\n    ssh_scp_files(\"10.43.192.33\", user, password, \"/home/rais/Arista_Automatisation/usb/basic-config/Leaf/Leaf-5.txt\", \"/home/cvpadmin/\")",
        "detail": "Backend.yml.reset",
        "documentation": {}
    },
    {
        "label": "run_ansible_playbook",
        "kind": 2,
        "importPath": "Backend.yml.reset",
        "description": "Backend.yml.reset",
        "peekOfCode": "def run_ansible_playbook(playbook_path):\n    os.chdir(os.path.dirname(playbook_path))\n    try:\n        subprocess.run([\"ansible-playbook\", os.path.basename(playbook_path)], check=True)\n    except subprocess.CalledProcessError as e:\n        return False\n    else:\n        return True\ndef main():\n    execute_scp_command(\"cvpadmin\" , \"cvpadmin\")",
        "detail": "Backend.yml.reset",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Backend.yml.reset",
        "description": "Backend.yml.reset",
        "peekOfCode": "def main():\n    execute_scp_command(\"cvpadmin\" , \"cvpadmin\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/1/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/2/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/3/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/4/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/5/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/6/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/7/Leaf.yml\")\n    run_ansible_playbook(\"/home/rais/Arista_Automatisation/yml/Ansible/Reset_basic_config/Leaf/8/Leaf.yml\")",
        "detail": "Backend.yml.reset",
        "documentation": {}
    }
]